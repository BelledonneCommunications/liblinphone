/**
 * @mainpage
 *
 * @section welcome Welcome to liblinphone's C API reference documentation.
 *
 * Liblinphone is a high-level open source library that integrates all the SIP voice/video and instant messaging features into a single easy-to-use API.
 * This is the VoIP SDK engine on which Linphone applications are based.
 *
 * Liblinphone combines our media processing and streaming toolkit (Mediastreamer2) with our user-agent library for SIP signaling (belle-sip).
 *
 * Liblinphone is distributed under GPLv3 (https://www.gnu.org/licenses/gpl-3.0.html). Please understand the licencing details before using it!
 * For any use of this library beyond the rights granted to you by the GPLv3 license, please contact Belledonne Communications (https://www.linphone.org/contact).
 *
 *
 * @section other_languages Other languages
 *
 * Liblinphone has support for a variety of languages, each one has its own reference documentation:
 *
 * - C (https://download.linphone.org/@LINPHONESDK_STATE@/docs/liblinphone/@STRIPPED_LINPHONE_VERSION@/c)
 * - C++ (https://download.linphone.org/@LINPHONESDK_STATE@/docs/liblinphone/@STRIPPED_LINPHONE_VERSION@/c++)
 * - Swift (https://download.linphone.org/@LINPHONESDK_STATE@/docs/liblinphone/@STRIPPED_LINPHONE_VERSION@/swift)
 * - Java (https://download.linphone.org/@LINPHONESDK_STATE@/docs/liblinphone/@STRIPPED_LINPHONE_VERSION@/java)
 * - C# (https://download.linphone.org/@LINPHONESDK_STATE@/docs/liblinphone/@STRIPPED_LINPHONE_VERSION@/cs)
 * - Python (https://download.linphone.org/@LINPHONESDK_STATE@/docs/liblinphone/@STRIPPED_LINPHONE_VERSION@/python)
 *
 *
 * Tutorials (code examples) are available on our gitlab repository (https://gitlab.linphone.org/BC/public/tutorials) for Swift, Java/Kotlin, and C#.
 *
 * @see http://www.linphone.org
 *
 * @section quick_tour Quick tour of liblinphone's features
 *
 * @subsection intro Introduction
 *
 * Liblinphone's has a consistent object-oriented design. All objects are sharing a common base structure, with ref-counting.
 * Most objects must be constructed from the #LinphoneFactory object. By convention, all functions that are called '*create*' return a new object that needs to be later destroy
 * by the application using the '*unref*' function of the object.
 * Liblinphone is using SIP as signaling protocol, which actually comprises a huge set of RFCs to cover various aspects of communications. Some terminology of the API is directly inherited from
 * SIP specifications, that's why having some knowledge of the protocol is recommended for a better understanding of this documentation.
 *
 * @subsection initializing Initializing the engine
 *
 * A typical liblinphone application has to first instanciate a #LinphoneCore object using the #LinphoneFactory. The core object represents the liblinphone engine, from which call,
 * conferences, instant messages can be sent or received.
 * For events to be reported and engine to schedule its tasks, the application must call linphone_core_iterate() at regular interval, typically from a 20ms timer.
 * In most case, a SIP account has to be provisionned so that SIP registration can take place onto a SIP server. This task is designated to the #LinphoneAccount object.
 * A #LinphoneAccount can be created using linphone_core_create_account(), based on #LinphoneAccountParams representing parameters created with linphone_core_create_account_params().
 * Then, account can be added to the core for usage using linphone_core_add_account().
 *
 * Application usually need to get informed of events occuring in the lifetime of the engine, which is done through callbacks '*Cbs' objects that application can use
 * to set their own callbacks functions.
 * An important callback object is the #LinphoneCoreCbs. Once filled with its own function pointers, the callback structure can be assigned to the LinphoneCore
 * using linphone_core_add_callbacks(). For example, application usually need to at least fill the #LinphoneCoreCbsCallCreatedCb callback using linphone_core_cbs_set_call_created()
 * in order to get informed when a new incoming call is created.
 *
 * @subsection calls Making calls
 *
 * Applications can place outgoing calls using linphone_core_invite() or linphone_core_invite_address_with_params().
 * The #LinphoneCallParams object represents parameters for the calls, such as enabling video, requiring a specific #LinphoneMediaEncryption.
 * The #LinphoneCallCbs object provides application way to get inform of the progress of the call, represented by the LinphoneCallState enum.
 * Incoming calls are notified through the #LinphoneCoreCbs callback interface, and can later be accepted using linphone_call_accept().
 * Calls can be terminated or aborted at any time using linphone_call_terminate().
 *
 * @subsection instant_messaging Instant messaging
 *
 * The #LinphoneChatRoom object represents a text conversation. The LinphoneCore object provides persistancy for all conversations, ie it stores all received and sent messages.
 * The list of conversations can be retrieved using linphone_core_get_chat_rooms()
 * To create a new conversation, use linphone_core_create_chat_room_2(). ChatRoomParams provide a way to specify which kind of chatroom is to be created: for group,
 * for one-ton-one conversation, with end-to end encryption for example.
 * To send a message, first create the #LinphoneChatMessage with linphone_chat_room_create_message_from_utf8(), then send it with #linphone_chat_message_send().
 * A #LinphoneChatMessage reports its progress through the #LinphoneChatMessageCbs callback interface.
 * #LinphoneChatRoom objects are automatically created by the #LinphoneCore when receiving a message that starts a new conversation, and notified through the #LinphoneCoreCbs interface.
 *
 * @subsection presence Presence
 *
 * Applications can submit presence information through linphone_core_set_presence_model(). The LinphonePresenceModel object represents the presence information,
 * which is submitted to a presence server.
 * Symmetrically, applications can subscribe to the presence server to get notified of the presence status of a contact list.
 * This is to be done thanks to the #LinphoneFriendList and #LinphoneFriend object.
 *
**/

/**
 * @defgroup initializing Initializing
 * @brief Initializing liblinphone.
**/

/**
 * @defgroup account Accounts
 * @brief Management of SIP accounts, including various SIP service settings.
**/

/**
 * @defgroup logging Logging
 * @brief Logging service of Linphone.
 */

/**
 * @defgroup call_control Call control
 * @brief Placing and receiving calls.
 *
 * The #LinphoneCall object represents an incoming or outgoing call managed by the #LinphoneCore.
 *
**/

/**
 * @defgroup call_misc Call misc
 * @brief Obtaining information about a running call: sound volumes, quality indicators.
 *
 * When a call is running, it is possible to retrieve in real time current measured volumes and quality indicator.
 *
**/

/**
 * @defgroup media_parameters Media parameters
 * @brief Controlling media parameters.
 *
 * <b>Multicast</b>
 *
 * Call using rtp multicast addresses are supported for both audio and video with some limitations. Limitations are, no stun, no ice, no encryption.
 *  - Incoming call with multicast address are automatically accepted. The called party switches in a media receive only mode.
 *  - Outgoing call willing to send media to a multicast address can activate multicast using linphone_core_enable_video_multicast()
 *    or linphone_core_enable_audio_multicast(). The calling party switches in a media listen send only mode.
**/

/**
 * @defgroup network_parameters Network parameters
 * @brief Controlling network parameters (ports, mtu...).
**/

/**
 * @defgroup authentication Authentication
 * @brief Managing authentication: userid and passwords.
**/

/**
 * @defgroup chatroom Chatroom
 * @brief Instant messaging
 *
**/

/**
 * @defgroup call_logs Call logs
 * @brief Managing call logs.
**/

/**
 * @defgroup alert Alert
 * @brief Managing Alerts.
**/

/**
 * @defgroup dictionary Dictionary
 * @brief Managing Dictionary.
**/

/**
 * @defgroup linphone_address Linphone address
 * @brief SIP address parser API.

 * This api is useful for manipulating SIP addresses ('from' or 'to' headers or SIP URIs).
**/

/**
 * @defgroup conference Conferencing
 * @brief Making a audio/video conferences.
 *
 *
**/

/**
 * @defgroup contacts Contacts
 * @brief Create, manage and search contacts.
 *
 *
**/

/**
 * @defgroup ekt_info_api Ekt
 * @brief Managing EktInfo
 */

/**
 * @defgroup event_api Event api
 * @brief Managing generic subscriptions and publishes.
 *
 * The LinphoneEvent api allows application to control subscriptions, receive notifications and make publish to peers, in a generic manner.
 */

/**
 * @defgroup ldap LDAP server interaction
 * @brief Making LDAP searches to lookup contacts.
**/

/**
 * @defgroup misc Misc
 * @brief Miscenalleous: logs, version strings, config storage.
**/

/**
 * @defgroup wrapper
 * @brief Wrapper utilities.
 *
 * These functions are used by automatic API wrapper generators and should not
 * be used by C API users.
 */

/**
 * @defgroup IOS
 * @brief iOS specific functions
 *
 * These functions handle specific aspects of iOS, mainly CallKit integration.
 */

