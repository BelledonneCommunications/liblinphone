
/*
LinphoneEnums.swift
Copyright (C) 2019 Belledonne Communications SARL

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/
import Foundation




{{#enums}}
{{#enum}}
{{#doc}}
{{#lines}}
/// {{{line}}}
{{/lines}}
{{/doc}}
{{#isFlag}}
public struct {{enumName}}:OptionSet
{
	public let rawValue: Int

	public init(rawValue: Int) {
		self.rawValue = rawValue
	}

	{{#values}}
	{{#doc}}
	{{#lines}}
	/// {{{line}}}
	{{/lines}}
	{{/doc}}
	public static let {{name}} = {{enumName}}(rawValue: {{{value}}})
	{{/values}}
}
{{/isFlag}}
{{^isFlag}}
public enum {{enumName}}:Int
{
	{{#values}}
	{{#doc}}
	{{#lines}}
	/// {{{line}}}
	{{/lines}}
	{{/doc}}
	case {{name}} = {{{value}}}
	{{/values}}
}
{{/isFlag}}
{{/enum}}
{{/enums}}

//////////////////////////////////////////////////////////////////////////////





func linphoneCharToString (charPointer: UnsafePointer<CChar>?) -> String?{
	return charPointer != nil ? String(cString: charPointer!) : nil
}

public class LinphoneObject {
	var cPtr:OpaquePointer?

	init(cPointer:OpaquePointer) {
		cPtr = cPointer
		belle_sip_object_ref(UnsafeMutableRawPointer(cPtr))
	}

	deinit {
		belle_sip_object_unref(UnsafeMutableRawPointer(cPtr))
	}
}
protocol LinphoneObjectDelegate {
	var someDate: Int {get set}
	var callBacks: OpaquePointer {get set}
}

{{#classes}}
{{#_class}}
{{#hasListener}}
// TODO
class {{className}}Delegate: LinphoneObjectDelegate {
	var someDate: Int

	var callBacks: OpaquePointer

	init() {
		self.someDate = Int(Date().timeIntervalSince1970)
		self.callBacks = linphone_factory_create_account_creator_cbs(linphone_factory_get())
	}
}
{{/hasListener}}

{{#doc}}
{{#lines}}
// {{{line}}}
{{/lines}}
{{/doc}}
public class {{className}} : LinphoneObject
{
	{{#hasListener}}
	var delegates: [{{className}}Delegate]?
	{{/hasListener}}

	static func getSobject(cObject:OpaquePointer?) -> {{className}}? {
		if cObject == nil {
			return nil
		} else {
			let result = belle_sip_object_data_get(UnsafeMutablePointer(cObject), "swiftRef")
			if (result != nil) {
				return Unmanaged<{{className}}>.fromOpaque(result!).takeUnretainedValue()
			}

			let sObject = {{className}}(cPointer: cObject!)
			belle_sip_object_data_set(UnsafeMutablePointer(cObject), "swiftRef",  UnsafeMutableRawPointer(Unmanaged.passRetained(sObject).toOpaque()), nil)

			return sObject
		}
	}

	{{#isLinphoneFactory}}
	static var Instance:Factory?

	static func get() -> Factory {
		if Instance == nil {
			Instance = Factory(cPointer: linphone_factory_get())
		}
		return Instance!
	}
	{{/isLinphoneFactory}}
	{{#isLinphoneCall}}

	/// Get the native window handle of the video window, casted as an unsigned long.
	/*public var nativeVideoWindowId: UnsafeMutableRawPointer?
	{
		get
		{
			return linphone_call_get_native_video_window_id(cPtr)
		}
		set
		{
			linphone_call_set_native_video_window_id(cPtr, newValue)
		}
	}*/
	{{/isLinphoneCall}}
	{{#isLinphoneCore}}

 static extern IntPtr linphone_core_get_ms_factory(IntPtr thiz);

	public MediastreamerFactory MsFactory {
		get
		{
			IntPtr ptr = linphone_core_get_ms_factory(nativePtr);
									MediastreamerFactory factory = new MediastreamerFactory();
			factory.nativePtr = ptr;
									return factory;
		}
	}

	/// Get the native window handle of the video window.
	public string NativeVideoWindowIdString
	{
		get
		{
			return Marshal.PtrToStringUni(linphone_core_get_native_video_window_id(nativePtr));
		}
		set
		{
			linphone_core_set_native_video_window_id(nativePtr, Marshal.StringToHGlobalUni(value));
		}
	}

	/// Get the native window handle of the video preview window.
	public string NativePreviewWindowIdString
	{
		get
		{
			return Marshal.PtrToStringUni(linphone_core_get_native_preview_window_id(nativePtr));
		}
		set
		{
			linphone_core_set_native_preview_window_id(nativePtr, Marshal.StringToHGlobalUni(value));
		}
	}
	{{/isLinphoneCore}}
	{{#dllImports}}
	{{#has_property}}
	{{^getCurrentCallbacks}}

	{{#doc}}
	{{#lines}}
	/// {{{line}}}
	{{/lines}}
	{{/doc}}
	public var {{property_name}}: {{{return}}}{{{return_default}}}
	{
	{{#has_getter}}
	{{#has_setter}}
		get
		{
	{{/has_setter}}
			{{#is_string}}
			return linphoneCharToString(charPointer: {{getter_c_name}}(cPtr))
			{{/is_string}}
			{{#is_bool}}
			return {{getter_c_name}}(cPtr)>0
			{{/is_bool}}
			{{#is_class}}
			return {{{return}}}.getSobject(cObject:{{getter_c_name}}(cPtr))
			{{/is_class}}
			{{#is_enum}}
			return {{{return}}}(rawValue: Int({{getter_c_name}}(cPtr).rawValue))!
			{{/is_enum}}
			{{#is_int}}
			return {{{return}}}({{getter_c_name}}(cPtr))
			{{/is_int}}
			{{#is_generic}}
			return {{getter_c_name}}(cPtr)
			{{/is_generic}}
			{{#is_string_list}}
			var swiftList = [String]()
			var cList = {{getter_c_name}}(cPtr)
			while (cList != nil) {
				swiftList.append(String(cString: unsafeBitCast(cList!.pointee.data, to: UnsafePointer<CChar>.self)))
				cList = cList!.pointee.next
			}
			return swiftList
			{{/is_string_list}}
			{{#is_class_list}}
			var swiftList = [{{{list_type}}}]()
			var cList = {{getter_c_name}}(cPtr)
			while (cList != nil) {
				let data = unsafeBitCast(cList?.pointee.data, to: OpaquePointer.self)
				swiftList.append({{{list_type}}}.getSobject(cObject: data)!)
				cList = UnsafePointer<bctbx_list_t>(cList?.pointee.next)
			}
			return swiftList
			{{/is_class_list}}
	{{#has_setter}}
		}
  {{/has_setter}}
	{{/has_getter}}
	{{#has_setter}}
	{{#has_getter}}
		set
	{{/has_getter}}
	{{^has_getter}}
		willSet
	{{/has_getter}}
		{
			{{#is_string}}
			{{#exception}}let exception_result = {{/exception}}{{setter_c_name}}(cPtr, newValue)
			{{/is_string}}
			{{#is_bool}}
			{{#exception}}let exception_result = {{/exception}}{{setter_c_name}}(cPtr, newValue==true ? 1:0)
			{{/is_bool}}
			{{#is_class}}
			{{#exception}}let exception_result = {{/exception}}{{setter_c_name}}(cPtr, newValue?.cPtr)
			{{/is_class}}
			{{#is_enum}}
			{{#exception}}let exception_result = {{/exception}}{{setter_c_name}}(cPtr, Linphone{{{return}}}(rawValue: {{enum_type}}(newValue.rawValue)))
			{{/is_enum}}
			{{#is_int}}
			{{#exception}}let exception_result = {{/exception}}{{setter_c_name}}(cPtr, CInt(newValue))
			{{/is_int}}
			{{#is_generic}}
			{{#exception}}let exception_result = {{/exception}}{{setter_c_name}}(cPtr, newValue)
			{{/is_generic}}
			{{#is_string_list}}
			var cList: UnsafeMutablePointer<bctbx_list_t>? = nil
			for data in newValue {
				let sData:NSString = data as NSString
				cList = bctbx_list_append(cList, unsafeBitCast(sData.utf8String, to: UnsafeMutablePointer<CChar>.self))
			}
			{{#exception}}let exception_result = {{/exception}}{{setter_c_name}}(cPtr, cList)
			{{/is_string_list}}
			{{#is_class_list}}
			var cList: UnsafeMutablePointer<bctbx_list_t>? = nil
			for data in newValue {
				cList = bctbx_list_append(cList, data.cPtr)
			}
			{{#exception}}let exception_result = {{/exception}}{{setter_c_name}}(cPtr, cList)
			{{/is_class_list}}
			{{#exception}}if (exception_result != 0) {
				print("{{property_name}} setter returned value \(exception_result)")
			}{{/exception}}
		}
	{{/has_setter}}
	}
	{{/getCurrentCallbacks}}
	{{/has_property}}
	{{#listener}}
	{{#impl}}
	func {{name}}({{#args}}delegate: {{className}}Delegate{{/args}}){{#return}} -> {{className}}Delegate?{{/return}}
	{
		{{#has_getter}}
		let cbs = {{c_name}}(cPtr)
		if let location = delegates?.firstIndex(where: { $0.callBacks == cbs }) {
			return delegates![location]
		}
		return nil
		{{/has_getter}}
		{{#addListener}}
		delegates?.append(delegate)
		{{c_name}}(cPtr, delegate.callBacks)
		{{/addListener}}
		{{#removeListener}}
		if let location = delegates?.firstIndex(where: { $0.someDate == delegate.someDate }) {
			{{c_name}}(cPtr, delegate.callBacks)
			delegates?.remove(at: location)
		}
		{{/removeListener}}
	}
	{{/impl}}
	{{/listener}}
	{{^listener}}
	{{#impl}}
	{{#doc}}
	{{#lines}}
	/// {{{line}}}
	{{/lines}}
	{{/doc}}
	{{static}} func {{name}}({{{args}}}) {{#return}}-> {{{type}}}{{#is_string}}?{{/is_string}}{{/return}}
	{
		{{#is_string}}
		return linphoneCharToString(charPointer: {{c_name}}(cPtr{{#c_args}}, {{{c_args}}}{{/c_args}}))
		{{/is_string}}
		{{#is_bool}}
		{{return}}{{c_name}}(cPtr{{#c_args}}, {{{c_args}}}{{/c_args}})>0
		{{/is_bool}}
		{{#is_class}}
		return {{{type}}}.getSobject(cObject: {{c_name}}({{^static}}cPtr{{#c_args}}, {{/c_args}}{{/static}}{{{c_args}}}))!
		{{/is_class}}
		{{#is_enum}}
		{{#exception}}let exception_result = {{/exception}}{{#return}}{{return}}{{{type}}}(rawValue: Int({{/return}}{{c_name}}(cPtr{{#c_args}}, {{{c_args}}}{{/c_args}}){{#return}}.rawValue))!{{/return}}
		{{#exception}}if (exception_result != 0) {
			print("{{name}} returned value \(exception_result)")
		}{{/exception}}
		{{/is_enum}}
		{{#is_int}}
		{{#exception}}let exception_result = {{/exception}}{{return}}Int({{c_name}}(cPtr{{#c_args}}, {{{c_args}}}{{/c_args}}))
		{{#exception}}if (exception_result != 0) {
			print("{{name}} returned value \(exception_result)")
		}{{/exception}}
		{{/is_int}}
		{{#is_generic}}
		{{#exception}}let exception_result = {{/exception}}{{return}}{{c_name}}(cPtr{{#c_args}}, {{{c_args}}}{{/c_args}})
		{{#exception}}if (exception_result != 0) {
			print("{{name}} returned value \(exception_result)")
		}{{/exception}}
		{{/is_generic}}
		{{#is_string_list}}
		var swiftList = [String]()
		var cList = {{c_name}}(cPtr{{#c_args}}, {{{c_args}}}{{/c_args}})
		while (cList != nil) {
			swiftList.append(String(cString: unsafeBitCast(cList!.pointee.data, to: UnsafePointer<CChar>.self)))
			cList = cList!.pointee.next
		}
		return swiftList
		{{/is_string_list}}
		{{#is_class_list}}
		var swiftList = [{{{list_type}}}]()
		var cList = {{c_name}}(cPtr{{#c_args}}, {{{c_args}}}{{/c_args}})
		while (cList != nil) {
			let data = unsafeBitCast(cList?.pointee.data, to: OpaquePointer.self)
			swiftList.append({{{list_type}}}.getSobject(cObject: data)!)
			cList = UnsafePointer<bctbx_list_t>(cList?.pointee.next)
		}
		return swiftList
		{{/is_class_list}}
	}
	{{/impl}}
	{{/listener}}
	{{/dllImports}}
}
{{/_class}}
{{/classes}}
